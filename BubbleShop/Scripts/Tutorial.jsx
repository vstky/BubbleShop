class ProductBox extends React.Component {
    constructor(props) {
        super(props);
        this.state = { data: [] };
        this.handleProductSubmit = this.handleProductSubmit.bind(this);
    }
    loadProductsFromServer() {
        const xhr = new XMLHttpRequest();
        xhr.open('get', this.props.url, true);
        xhr.onload = () => {
            const data = JSON.parse(xhr.responseText);
            this.setState({ data: data });
        };
        xhr.send();
    }
    handleProductSubmit(product) {
        const products = this.state.data;
        // Optimistically set an id on the new product. It will be replaced by an
        // id generated by the server. In a production application you would likely
        // use a more robust system for ID generation.
        product.Id = products.length + 1;
        const newProducts = products.concat([product]);
        this.setState({ data: newProducts });
        /*
        console.log("url: " + this.props.submitUrl);
        console.log("product: " + JSON.stringify(product));
        console.log(">>>>>>>>>>>>Name: " + data.get('Name'));
        console.log(">>>>>>>>>>>>Manufacturer: " + data.get('Manufacturer'));
        console.log(">>>>>>>>>>>>Brand: " + data.get('Brand'));
        console.log(">>>>>>>>>>>>Description: " + data.get('Description'));
        console.log(">>>>>>>>>>>>ProductCode: " + data.get('ProductCode'));
        console.log(">>>>>>>>>>>>Status: " + data.get('Status'));
        console.log(">>>>>>>>>>>>LastUpdated: " + data.get('LastUpdated'));
        */
        const xhr = new XMLHttpRequest();
        xhr.open('post', this.props.submitUrl, true);
        xhr.setRequestHeader("Content-Type", "application/json");
        xhr.onload = () => this.loadProductsFromServer();
        xhr.send(JSON.stringify(product));
        console.log("------------");
    }
    componentDidMount() {
        this.loadProductsFromServer();
        window.setInterval(() => this.loadProductsFromServer(), this.props.pollInterval);
    }
    render() {
        return (
            <div className="productBox">
                <h1>Products</h1>
                <ProductList data={this.state.data} />
                <ProductForm onProductSubmit={this.handleProductSubmit} />
            </div>
        );
    }
}

class ProductList extends React.Component {
    render() {
        const productNodes = this.props.data.map(product => (
            <Product key={product.Id} name={product.Name} id={product.Id}>
                {product.Manufacturer}
                {product.Brand}
                {product.Description}
                {product.ProductCode}
                {product.Status}
                {product.LastUpdated}
            </Product>
        ));
        return (
            <div className="productList">
                {productNodes}
            </div>
        );
    }
}

class ProductForm extends React.Component {
    constructor(props) {
        super(props);
        this.state = {
            name: '',
            manufacturer: '',
            brand: '',
            description: '',
            productCode: '',
            status: '',
            lastUpdated: ''
        };
        this.handleNameChange = this.handleNameChange.bind(this);
        this.handleManufacturerChange = this.handleManufacturerChange.bind(this);
        this.handleBrandChange = this.handleBrandChange.bind(this);
        this.handleDescriptionChange = this.handleDescriptionChange.bind(this);
        this.handleProductCodeChange = this.handleProductCodeChange.bind(this);
        this.handleStatusChange = this.handleStatusChange.bind(this);
        this.handleLastUpdatedChange = this.handleLastUpdatedChange.bind(this);
        this.handleSubmit = this.handleSubmit.bind(this);
    }
    handleNameChange(e) {
        this.setState({ name: e.target.value });
    }
    handleManufacturerChange(e) {
        this.setState({ manufacturer: e.target.value });
    }
    handleBrandChange(e) {
        this.setState({ brand: e.target.value });
    }
    handleDescriptionChange(e) {
        this.setState({ description: e.target.value });
    }
    handleProductCodeChange(e) {
        this.setState({ productCode: e.target.value });
    }
    handleStatusChange(e) {
        this.setState({ status: e.target.value });
    }
    handleLastUpdatedChange(e) {
        this.setState({ lastUpdated: e.target.value });
    }
    handleSubmit(e) {
        e.preventDefault();
        const name = this.state.name.trim();
        const manufacturer = this.state.manufacturer.trim();
        const brand = this.state.brand.trim();
        const description = this.state.description.trim();
        const productCode = this.state.productCode.trim();
        const status = this.state.status.trim();
        const lastUpdated = this.state.lastUpdated.trim();
        if (!lastUpdated || !status || !productCode || !description
                || !brand || !manufacturer || !name) {
            return;
        }
        this.props.onProductSubmit({
            Name: name,
            Manufacturer: manufacturer,
            Brand: brand,
            Description: description,
            ProductCode: productCode,
            Status: status,
            LastUpdated: lastUpdated
        });
        this.setState({
            name: '',
            manufacturer: '',
            brand: '',
            description: '',
            productCode: '',
            status: '',
            lastUpdated: ''
        });
    }
    render() {
        return (
            <form className="productForm" onSubmit={this.handleSubmit}>
                <input
                    type="text"
                    placeholder="Product name"
                    value={this.state.name}
                    onChange={this.handleNameChange}
                />
                <input
                    type="text"
                    placeholder="Manufacturer"
                    value={this.state.manufacturer}
                    onChange={this.handleManufacturerChange}
                />
                <input
                    type="text"
                    placeholder="Brand"
                    value={this.state.brand}
                    onChange={this.handleBrandChange}
                />
                <input
                    type="text"
                    placeholder="Description"
                    value={this.state.description}
                    onChange={this.handleDescriptionChange}
                />
                <input
                    type="text"
                    placeholder="ProductCode"
                    value={this.state.productCode}
                    onChange={this.handleProductCodeChange}
                />
                <input
                    type="text"
                    placeholder="Status"
                    value={this.state.status}
                    onChange={this.handleStatusChange}
                />
                <input
                    type="text"
                    placeholder="LastUpdated"
                    value={this.state.lastUpdated}
                    onChange={this.handleLastUpdatedChange}
                />
                <input type="submit" value="Post" />
            </form>
        );
    }
}

class Product extends React.Component {
    rawMarkup() {
        return { __html: new Remarkable().render(this.props.children.toString()) };
    }
    handleClick() {
        console.log(this.props.id);
    }
    render() {
        return (
            <div className="product">
                <h2>
                    {this.props.id} : {this.props.name}
                </h2>
                <span dangerouslySetInnerHTML={this.rawMarkup()} />
                <button onClick={(e) => this.handleClick(e)}>
                    Add to Cart
                </button>
            </div>
        );
    }
}

ReactDOM.render(
    <ProductBox url="/api/Products" submitUrl="/api/Products/PostProduct" pollInterval={20000} />,
    document.getElementById('content')
);